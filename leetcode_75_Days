'''
75-Day
'''

'''
Day 1- Array- Running Sum
'''


# def runningSum(nums):
#         """
#         :type nums: List[int]
#         :rtype: List[int]
#         """
#         sum=[0]*len(nums)
#         sum[0]=nums[0]
#         for i in range(1,len(nums)):
#                 sum[i]=sum[i-1]+nums[i]

'''
Day 1- Find Pivot Index
'''

# def pivotIndex(self, nums):
#         # nums=[-1,-1,0,1,1,-1]
#         n=len(nums)
#         leftsum=[0]*(n+1)
        
#         leftsum[0]=0
#         for i in range(1,n+1):
#             leftsum[i]=leftsum[i-1]+nums[i-1]
        
#         for i in range(n):
#             if leftsum[i]==leftsum[n]-leftsum[i+1]:
#                 return i
#         if leftsum[n-1]==0:
#             return n-1
#         return -1

'''
Day -2 Strings
'''
'''
Isomorphic Strings
'''

# def isIsomorphic(s,t):
#         s_idx=[]
#         t_idx=[]
        
#         for i in s:               
#                 s_idx.append(s.index(i)) #adds index of first occurence of letter
#         for i in t:
#                 t_idx.append(t.index(i))
#         if s_idx==t_idx:
#                 return True
#         return False
              
# print(isIsomorphic('paper','title')) 

'''
is Subsequence
'''

# def isSubsequence(s, t):

#         s_ptr=0
#         t_ptr=0
        
#         while s_ptr<len(s) and t_ptr<len(t):
            
#             if s[s_ptr]==t[t_ptr]:
#                 s_ptr+=1
#             t_ptr+=1
        
#         if s_ptr==len(s):
#             return True
#         return False

'''
Day 3- Linked List

Merge 2 LL:
'''
# def mergeTwoLists(list1, list2):
#         """
#         :type list1: Optional[ListNode]
#         :type list2: Optional[ListNode]
#         :rtype: Optional[ListNode]
#         """
#         cur = dummy = ListNode()
#         while list1 and list2:               
#         if list1.val <= list2.val:
#                 cur.next = list1
#                 list1, cur = list1.next, list1
#         else:
#                 cur.next = list2
#                 list2, cur = list2.next, list2
                
#         if list1 or list2:
#         cur.next = list1 if list1 else list2
        
#         return dummy.next


'''
 Reverse Linked List
'''

# def reverseList(head):
#     """
#     :type head: ListNode
#     :rtype: ListNode
#     """
    
#     prev=next=None
#     curr=head
    
#     while curr:
        
#         next=curr.next
#         curr.next=prev
#         prev=curr
#         curr=next
    
#     head=prev
#     return head

'''
Day 4- Linked List

Middle of a Linked List
'''

# def middleNode(self, head):
#         """
#         :type head: ListNode
#         :rtype: ListNode
#         """
#         fir=sec=head

#         while sec!=None:
#                 if sec.next!=None:
#                         print(sec)
#                         fir=fir.next
#                         sec=sec.next.next
#                 else:
#                         break

#         return fir

'''
Linked List Cycle: return the index of beginning of cycle 
'''

# def detectCycle(self, head):
#         """
#         :type head: ListNode
#         :rtype: ListNode
#         """
        
#         if not head or not head.next:
#             return None
        
#         slow=fast=head
        
#         while slow and slow.next and fast.next and fast.next.next:
#             slow=slow.next
#             fast=fast.next.next
            
#             if slow==fast:
#                 break
            
#             if not slow or not fast:
#                 return None
#         if not slow or not slow.next or not fast.next or not fast.next.next:
#             return None
#         while slow!=head:
#             head=head.next
#             slow=slow.next
#         return head

# Similar to detecting cycle using floyds algo, just at the end, make head
# and slow meet to get the beginning of cycle.
        
'''
Day 5- Greedy Algorithm
'''

# def maxProfit(self, prices):
#         """
#         :type prices: List[int]
#         :rtype: int
#         """

#         i=0
#         j=1
#         max_profit=0

#         while j<len(prices):
                
#                 if prices[i]<=prices[j]:
#                 max_profit=max(max_profit,prices[j]-prices[i])
#                 else:
#                 i=j
#                 j+=1

#         return max_profit

'''
Longest Palindrome
'''
# from collections import Counter
# s= 'civilwartestingwhetherthatnaptionoranynartionsoconceivedandsodedicatedcanlongendureWeareqmetonagreatbattlefiemldoftzhatwarWehavecometodedicpateaportionofthatfieldasafinalrestingplaceforthosewhoheregavetheirlivesthatthatnationmightliveItisaltogetherfangandproperthatweshoulddothisButinalargersensewecannotdedicatewecannotconsecratewecannothallowthisgroundThebravelmenlivinganddeadwhostruggledherehaveconsecrateditfaraboveourpoorponwertoaddordetractTgheworldadswfilllittlenotlenorlongrememberwhatwesayherebutitcanneverforgetwhattheydidhereItisforusthelivingrathertobededicatedheretotheulnfinishedworkwhichtheywhofoughtherehavethusfarsonoblyadvancedItisratherforustobeherededicatedtothegreattdafskremainingbeforeusthatfromthesehonoreddeadwetakeincreaseddevotiontothatcauseforwhichtheygavethelastpfullmeasureofdevotionthatweherehighlyresolvethatthesedeadshallnothavediedinvainthatthisnationunsderGodshallhaveanewbirthoffreedomandthatgovernmentofthepeoplebythepeopleforthepeopleshallnotperishfromtheearth'

# def longestPalindrome(s):
#         """
#         :type s: str
#         :rtype: int
#         """
#         # s=s.upper()
#         s_count=Counter(s)
#         print(s_count)
#         flag=True
#         pal_len=0
#         for i in s_count:
#             if s_count[i]%2==0:
#                 pal_len+=s_count[i]
#             else:
#                 if flag: 
#                         flag=False
#                         pal_len+=(s_count[i])
#                 else:
#                         pal_len+=(s_count[i]-1)
        
#         return pal_len

# print(longestPalindrome(s))

'''
Day-6 Binary Search
'''

# def search(self, nums, target):
#         """
#         :type nums: List[int]
#         :type target: int
#         :rtype: int
#         """
#         start=0
#         end=len(nums)-1
#         mid=(len(nums)-1)//2
        
#         if target==nums[0]:
#             return 0
#         elif target==nums[-1]:
#             return len(nums)-1
        
#         while start!=end:
            
#             if nums[mid]==target:
#                 return mid
#             elif nums[mid]<target:
#                 start=mid+1
#             else:
#                 end=mid
#             mid=(start+end)//2
        
#         return -1

'''
Binary Seach- First Bad Version
'''

# def firstBadVersion(self, n):
#         """
#         :type n: int
#         :rtype: int
#         """
#         if n==1:
#             return 1
        
#         start=1
#         end=n
#         mid=(n)//2
        
#         while start!=end:
            
#             if isBadVersion(mid):
#                 if mid==1:
#                     return 1
#                 elif isBadVersion(mid-1):
#                     end=mid-1
#                 else:
#                     return mid
                
#             else:
#                 start=mid+1
        
#             mid=(start+end)//2
#         return mid
        
'''
Hashmap- Bulls and Cows
'''

# def getHint(self, secret, guess):
#         """
#         :type secret: str
#         :type guess: str
#         :rtype: str
#         """
#         # secret='1123'
#         # guess='0111'
#         x=0
#         s_counter=Counter(secret)
#         g_counter=Counter(guess)
#         for i in range(len(secret)):
#             if secret[i]==guess[i]:
#                 x+=1
#                 s_counter[secret[i]]-=1
#                 g_counter[secret[i]]-=1
        
#         y=0
        
#         for i in s_counter:
#             if i in g_counter and g_counter[i]>=0:
#                 y+=min(g_counter[i],s_counter[i])
                
        
#         return str(x)+'A'+str(y)+'B'

'''
Stack- Backspace String Compare
'''
# def backspaceCompare(self, s, t):
#         """
#         :type s: str
#         :type t: str
#         :rtype: bool
#         """
#         # s='y#fo##f'
#         # t='y#f#o##f'
        
#         s_stack=[]
#         t_stack=[]
        
#         for i in s:
#             if i=='#' and len(s_stack)>0:
#                 s_stack.pop()
#             elif i!='#':
#                 s_stack.append(i)
        
#         print(s_stack)
#         for i in t:
#             if i=='#' and len(t_stack)>0:
#                 t_stack.pop()
#             elif i!='#':
#                 t_stack.append(i)
#         print(t_stack)
#         if s_stack==t_stack:
#             return True
#         return False

'''
Decode String
'''
# def decodeString(s):
    # i=0
    # num=0
    # stack=['']

    # while i<len(s):
        
    #     if s[i].isdigit():
    #         num=num*10+int(s[i])
    #     elif s[i]=='[':
    #         stack.append(num)
    #         num=0
    #         stack.append('')
    #     elif s[i]==']':
    #         str1=stack.pop()
    #         count=stack.pop()
    #         str2=stack.pop()
    #         stack.append(str2+str1*count)
    #     else:
    #         stack[-1]+=s[i]
    #     i+=1

    # return(''.join(stack))
    
'''
Happy Number
'''

# def isHappy(self, n):
#     """
#     :type n: int
#     :rtype: bool
#     """
    
#     n_list={}
#     while True:
#         n=sum([int(x)**2 for x in str(n)])
#         if n==1:
#             return True
#         if n not in n_list:
#             n_list[n]=1
#         else:
#             return False
#     # Defining n_list as dictionary is very important, instead of list, bceause lookup in dictionary is O(1),
#     # while in list is O(n)

# '''
# Spiral Matrix
# '''

# def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        
#     # matrix=[[1,2,3,4],[5,6,7,8],[9,10,11,12]]
#     spiral=[]
#     i=0
#     j=-1
#     m=len(matrix)
#     n=len(matrix[0])
#     for l in range(len(matrix[0])):
        
#         for r in range(n):
            
#             if l%2==0:
#                 j+=1
#             else:
#                 j-=1
#             # print(f'{i}{j}')
#             spiral.append(matrix[i][j])
            
#         n-=1
#         for k in range(m-1):
#             # print(k)
#             if l%2==0:
#                 i+=1
#             else:
#                 i-=1
#             # print(f'{i}{j}')
#             spiral.append(matrix[i][j])
#         m-=1
#         if n==0 or m==0:
#             break
#         # print(spiral)
            
#     return(spiral)